trigger:
- dev

parameters:
- name: ServiceConn
  displayName: ServiceConn
  type: string
  default: PROD-Connection2
- name: PowerBiServiceConn
  displayName: PowerBiServiceConn
  type: string
  default: Power-bi conn
- name: groupvariables
  type: object
  default:
   - CloudMonitorBandA
   - CloudMonitorSentis


stages:

- stage: 'DeployDB'
  displayName: 'Deploy to SQL Database'
  pool:
      vmImage: 'windows-latest'
  jobs:
  - ${{ each group in parameters.groupvariables }}:
      - job:
        displayName: 'Deploy to SQL Database'
        variables:
        - group: Release for Foundation Function Apps ${{ group }}
        steps:
        - task: AzurePowerShell@5
          inputs:
            azureSubscription: '${{ parameters.ServiceConn }}'
            ScriptType: 'InlineScript'       
            Inline: |
              $Context = Get-AzContext
              Set-AzKeyVaultAccessPolicy -VaultName $(resourceGroupLowerCase)-KV -ServicePrincipalName $Context.Account.Id -PermissionsToSecrets Get,List,Set
            azurePowerShellVersion: 'LatestVersion'
        - task: AzureKeyVault@1
          displayName: 'Download Keyvault'
          inputs:
            azureSubscription: '${{ parameters.ServiceConn }}'
            KeyVaultName: '$(resourceGroupLowerCase)-KV'
            SecretsFilter: '*'
            RunAsPreJob: false
        - task: PowerBIActions@5
          displayName: 'Create workspace'
          inputs:
            PowerBIServiceEndpoint: '${{ parameters.PowerBiServiceConn }}'
            WorkspaceName: 'CloudMonitor - $(Customer) $(Environment)'
            PowerBIPath: '$(System.DefaultWorkingDirectory)\Power BI\CloudMonitor.pbix'
            Create: true
        - task: PowerBIActions@5
          displayName: 'Getting access to workspace'
          inputs:
            PowerBIServiceEndpoint: '${{ parameters.PowerBiServiceConn }}'
            Action: 'AddUsers'
            WorkspaceName: 'CloudMonitor - $(Customer) $(Environment)'
            Users: '$(WorkspaceUser)'
            Permission: '$(WorkSpaceAccessLevel)'
        - task: PowerBIActions@5
          displayName: 'Take Ownership'
          inputs:
            PowerBIServiceEndpoint: '${{ parameters.PowerBiServiceConn }}'
            Action: 'TakeOwnership'
            WorkspaceName: 'CloudMonitor - $(Customer) $(Environment)'
            UpdateAll: true
        - task: PowerBIActions@5
          displayName: 'Update connection'
          inputs:
            PowerBIServiceEndpoint: '${{ parameters.PowerBiServiceConn }}'
            Action: 'UpdateDatasource'
            WorkspaceName: 'CloudMonitor - $(Customer) $(Environment)'
            UpdateAll: true
            DatasetName: 'CloudMonitor-Data-Driven-V3'
            DatasourceType: 'Sql'
            OldServer: 'cloudmonitor-dd-dev-dbserver.database.windows.net'
            NewServer: '$(resourceGroup)-dbserver.database.windows.net'
            OldDatabase: 'cloudmonitor-dd-dev-db'
            NewDatabase: '$(resourceGroup)-db'
        - task: AzurePowerShell@5
          displayName: 'Update Credential for non env'
          inputs:
            azureSubscription: '${{ parameters.ServiceConn }}'
            ScriptType: 'FilePath'
            ScriptPath: '$(System.DefaultWorkingDirectory)\Refresh Script\BiPowershellNonEnv.ps1'
            ScriptArguments: '-Customer $(Customer) -vaultname $(resourceGroupLowerCase)-KV -PowerBiClientId $(PowerBiClientId) -PowerBiClientSecretKey $(PowerBiClientSecretKey) -tenantId $(TENANT-ID-DD)'
            azurePowerShellVersion: 'LatestVersion'
            pwsh: true
          condition: eq(variables.Environment, '')
        - task: AzurePowerShell@5
          displayName: 'Update credentials'
          inputs:
            azureSubscription: '${{ parameters.ServiceConn }}'
            ScriptType: 'FilePath'
            ScriptPath: '$(System.DefaultWorkingDirectory)\Refresh Script\BiPowershell.ps1'
            ScriptArguments: '-Environment $(BiEnvironment) -Customer $(Customer) -vaultname $(resourceGroupLowerCase)-KV -PowerBiClientId $(PowerBiClientId) -PowerBiClientSecretKey $(PowerBiClientSecretKey) -tenantId $(TENANT-ID-DD)'
            azurePowerShellVersion: 'LatestVersion'
            pwsh: true
          condition: ne(variables.Environment, '')