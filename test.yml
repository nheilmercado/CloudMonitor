trigger:
- dev

parameters:
- name: ServiceConn
  displayName: ServiceConn
  type: string
  default: PROD-connection-dd
- name: PowerBiServiceConn
  displayName: PowerBiServiceConn
  type: string
  default: Power-bi conn
- name: groupvariables
  type: object
  default:
   - CloudMonitorPotentialx
   - CloudMonitorDDProd
   - CloudMonitorDDev


stages:

- stage: 'DeployDB'
  displayName: 'PowerBi Deployment'
  pool:
    name: DevOpsBuildAgentProdWindowsPool
  jobs:
  - ${{ each group in parameters.groupvariables }}:
      - job:
        displayName: 'PowerBi Deployment'
        variables:       
        - group: Release for Foundation Function Apps ${{ group }}
        
        steps:
            - task: AzurePowerShell@5
              inputs:
                azureSubscription: '${{ parameters.ServiceConn }}'
                ScriptType: 'InlineScript'
                Inline: |
                  set-AzContext -Subscription "$env:ARMSUBSCRIPTIONID" -Tenant "c986e767-07af-4c9c-b2a1-08446a3c3e71"
                  $Context = Get-AzContext    
                  Set-AzKeyVaultAccessPolicy -VaultName $(resourceGroupLowerCase)-KV -ServicePrincipalName $Context.Account.Id -PermissionsToSecrets Get,List,Set
                azurePowerShellVersion: 'LatestVersion'
            - task: AzurePowerShell@5
              name: GetWorkSpaceId
              inputs:
                azureSubscription: '${{ parameters.ServiceConn }}'
                ScriptType: 'InlineScript'
                Inline: |
                  $clientsec =  ConvertTo-SecureString -String $env:PowerBiClientSecretKey -AsPlainText -Force
                  $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:PowerBiClientId, $clientsec
                  Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credential -TenantId "$env:TENANTIDDD"
                  
                  Write-Host "Connected"
                  Write-Host "$env:Environment"
                  
                  $workspaceName = "CloudMonitor - $env:Customer"
                  
                  if ($env:Environment -ne ''){
                  $workspaceName = "CloudMonitor - $env:Customer - $env:Environment"
                  }
                  Write-Host "Name : $workspaceName"
                  
                  $workspace = Get-PowerBIWorkspace -Name $workspaceName

                  if ($workspace -ne $null){
                  $workspace_id = $workspace.Id
                  $workspace_id
                  }
                  else{
                  $workspace = New-PowerBIWorkspace -Name $workspaceName
                  Add-PowerBIWorkspaceUser -Id $workspace.Id -UserEmailAddress rohith.korupalli@data-driven.com -AccessRight Admin
                  }
                  
                  New-PowerBIReport -Path '$(System.DefaultWorkingDirectory)\Power BI\CloudMonitor.pbix' -Name 'CloudMonitor' -Workspace ( Get-PowerBIWorkspace -Name $workspaceName ) -ConflictAction "CreateOrOverwrite"
                  Write-Host "Created Report"
                  
                  $reportName = "CloudMonitor"    
                  $dataset = Get-PowerBIDataset -WorkspaceId $workspace.Id -Name $reportName    
                  $report = Get-PowerBIReport -WorkspaceId $workspace.Id
                  $resourcegroup = $env:resourceGroup
                  $resourcegroup
                  $servername = "$($resourcegroup)-dbserver.database.windows.net"
                  $dbname = "$($resourcegroup)-db"
                  
                  $patchBody = "{    
                    ""updateDetails"": [    
                        {    
                          ""datasourceSelector"": {    
                            ""datasourceType"": ""Sql"",    
                            ""connectionDetails"": {    
                              ""server"": ""CloudMonitor-DD-Dev-dbserver.database.windows.net"",    
                              ""database"": ""CloudMonitor-DD-Dev-db""    
                            }    
                          },    
                          ""connectionDetails"": {    
                            ""server"": ""$servername"",    
                            ""database"": ""$dbname""    
                          }    
                        }    
                      ]    
                    }" | ConvertFrom-Json 
                  $patchBody
                  Write-Host "#Takeover"
                  Invoke-PowerBIRestMethod -Url "groups/$($workspace.id)/datasets/$($dataset.Id)/Default.TakeOver" -Method Post
                  
                  $patchBodyJson = ConvertTo-Json -InputObject $patchBody -Depth 6 -Compress    
                  $url = "groups/$($workspace.Id)/datasets/$($dataset.Id)/Default.UpdateDatasources"   
                   Write-Host "#Update COnnection Strings"
                  Invoke-PowerBIRestMethod -Method Post -Url $url -Body $patchBodyJson

                  
                  Write-Host "##vso[task.setvariable variable=DataSetId]"$dataset.Id""
                  Write-Host "##vso[task.setvariable variable=BiId]"$workspace.Id""
                  
                azurePowerShellVersion: 'LatestVersion'
                pwsh: true
            - task: AzurePowerShell@5
              displayName: 'Update credentials'
              inputs:
                azureSubscription: '${{ parameters.ServiceConn }}'
                ScriptType: 'FilePath'
                ScriptPath: '$(System.DefaultWorkingDirectory)\Refresh Script\BiPowerShell.ps1'
                ScriptArguments: '-BiWorkspaceId $(BiId) -vaultname $(resourceGroupLowerCase)-KV -PowerBiClientId $(PowerBiClientId) -PowerBiClientSecretKey $(PowerBiClientSecretKey) -tenantId $(TENANTIDDD)'
                azurePowerShellVersion: 'LatestVersion'
                pwsh: true