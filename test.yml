trigger:
- RK-PowerBi-Deployment

parameters:
- name: ServiceConn
  displayName: ServiceConn
  type: string
  default: PROD-Connection2
- name: PowerBiServiceConn
  displayName: PowerBiServiceConn
  type: string
  default: Power-bi conn
- name: groupvariables
  type: object
  default:
   - CloudMonitorDDProd


stages:

- stage: 'DeployDB'
  displayName: 'Deploy to SQL Database'
  pool:
    name: DevOpsBuildAgentProdWindowsPool
  jobs:
  - ${{ each group in parameters.groupvariables }}:
      - job:
        displayName: 'Deploy to SQL Database'
        variables:
        
        - group: Release for Foundation Function Apps ${{ group }}
        
        steps:
            - task: PowerBIToolInstaller@1
            
            - task: AzurePowerShell@5
              name: GetWorkSpaceId
              inputs:
                azureSubscription: '${{ parameters.ServiceConn }}'
                ScriptType: 'InlineScript'
                Inline: |
                  $clientsec =  ConvertTo-SecureString -String $env:PowerBiClientSecretKey -AsPlainText -Force
                  $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:PowerBiClientId, $clientsec
                  Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credential -TenantId "$env:TENANTIDDD"

                  $workspace = Get-PowerBIWorkspace -Filter "name eq 'Test'"

                  if ($workspace -ne $null){
                  $workspace_id = $workspace.Id
                  Write-Host "##vso[task.setvariable variable=BiId]"$workspace.Id""
                  Write-Host "Workspace: yes $($workspace_id)"
                  }
                  else{
                  New-PowerBIWorkspace -Name 'Test'
                  Add-PowerBIWorkspaceUser -Id '7638c835-dbd4-49e4-ad77-3f890758f7f5' -UserEmailAddress rohith.korupalli@data-driven.com -AccessRight Admin
                  }
                  
                  New-PowerBIReport -Path '$(System.DefaultWorkingDirectory)\Power BI\CloudMonitor.pbix' -Name 'Report' -Workspace ( Get-PowerBIWorkspace -Name 'Test' ) -ConflictAction "Overwrite"
                    
                  $reportName = "Report"    
                  $dataset = Get-PowerBIDataset -WorkspaceId $workspace.Id -Name $reportName    
                  $report = Get-PowerBIReport -WorkspaceId $workspace.Id
                  
                  $patchBody = '{    
                    "updateDetails": [    
                        {    
                          "datasourceSelector": {    
                            "datasourceType": "Sql",    
                            "connectionDetails": {    
                              "server": "CloudMonitor-DD-Dev-dbserver.database.windows.net",    
                              "database": "CloudMonitor-DD-Dev-db"    
                            }    
                          },    
                          "connectionDetails": {    
                            "server": "cloudmonitor-dd-prod-dbserver.database.windows.net",    
                            "database": "cloudmonitor-dd-prod-db"    
                          }    
                        }    
                      ]    
                    }' | ConvertFrom-Json
                  
                  Write-Host "#Takeover"
                  Invoke-PowerBIRestMethod -Url "groups/$($workspace.id)/datasets/$($dataset.Id)/Default.TakeOver" -Method Post
                  
                  $patchBodyJson = ConvertTo-Json -InputObject $patchBody -Depth 6 -Compress    
                  $url = "groups/$($workspace.Id)/datasets/$($dataset.Id)/Default.UpdateDatasources"   
                   Write-Host "#Update COnnection Strings"
                  Invoke-PowerBIRestMethod -Method Post -Url $url -Body $patchBodyJson

                  
                  Write-Host "##vso[task.setvariable variable=DataSetId]"$dataset.Id""
                  Write-Host "##vso[task.setvariable variable=BiId]"$workspace.Id""
                  
                azurePowerShellVersion: 'LatestVersion'
                pwsh: true
            - task: AzurePowerShell@5
              displayName: 'Update credentials'
              inputs:
                azureSubscription: '${{ parameters.ServiceConn }}'
                ScriptType: 'FilePath'
                ScriptPath: '$(System.DefaultWorkingDirectory)\Refresh Script\test.ps1'
                ScriptArguments: '-BiWorspaceId $(BiId) -vaultname $(resourceGroupLowerCase)-KV -PowerBiClientId $(PowerBiClientId) -PowerBiClientSecretKey $(PowerBiClientSecretKey) -tenantId $(TENANTIDDD)'
                azurePowerShellVersion: 'LatestVersion'
                pwsh: true